
SPI Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000c9  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000008e  00000000  00000000  00000215  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000dd  00000000  00000000  000002a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000044  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000169  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000020  00000000  00000000  0000052d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_SlaveInit>:
#include"MACROS.h"

void SPI_SlaveInit(void)
{

DDRB = 0x40;  //slave Pins	
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	87 bb       	out	0x17, r24	; 23
SET_BIT(SPCR,SPE) ;  // When the SPE bit is written to one, the SPI is enabled
  70:	6e 9a       	sbi	0x0d, 6	; 13

CLR_BIT(SPCR,DORD) ;                        //(optional )When the DORD bit is written to zero, the MSB of the data word is transmitted first - Master&slave must be similar
  72:	6d 98       	cbi	0x0d, 5	; 13
CLR_BIT(SPCR,CPOL) ; CLR_BIT(SPCR,CPHA) ; //  (optional ) if you want adjust clock phase and polarity - Master&slave must be similar
  74:	6b 98       	cbi	0x0d, 3	; 13
  76:	6a 98       	cbi	0x0d, 2	; 13
  78:	08 95       	ret

0000007a <SPI_READ>:
}

unsigned char SPI_READ(void)
{
	
	while (GET_BIT(SPSR,SPIF)==0) ; 
  7a:	77 9b       	sbis	0x0e, 7	; 14
  7c:	fe cf       	rjmp	.-4      	; 0x7a <SPI_READ>
	return SPDR;
  7e:	8f b1       	in	r24, 0x0f	; 15
	
}
  80:	08 95       	ret

00000082 <main>:


main()

{
	 DDRC = 0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 bb       	out	0x14, r24	; 20
	 PORTC = 0x00;
  86:	15 ba       	out	0x15, r1	; 21
	 SPI_SlaveInit();
  88:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_SlaveInit>
	 while(1)
	 {
		PORTC= SPI_READ();
  8c:	0e 94 3d 00 	call	0x7a	; 0x7a <SPI_READ>
  90:	85 bb       	out	0x15, r24	; 21
  92:	fc cf       	rjmp	.-8      	; 0x8c <main+0xa>

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
