
external_int.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000182  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000151  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000fc  00000000  00000000  0000032b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000163  00000000  00000000  00000427  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000048  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b9  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000006d  00000000  00000000  0000078d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000007fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  74:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:

int j=0 , k=0 ;

#define F_CPU 1000000UL

ISR(INT0_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
     if(j<9){j++ ;	PORTA = j ;}
  8a:	80 91 60 00 	lds	r24, 0x0060
  8e:	90 91 61 00 	lds	r25, 0x0061
  92:	89 30       	cpi	r24, 0x09	; 9
  94:	91 05       	cpc	r25, r1
  96:	3c f4       	brge	.+14     	; 0xa6 <__vector_1+0x2a>
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	90 93 61 00 	sts	0x0061, r25
  9e:	80 93 60 00 	sts	0x0060, r24
  a2:	8b bb       	out	0x1b, r24	; 27
  a4:	04 c0       	rjmp	.+8      	; 0xae <__vector_1+0x32>
     else {j=0; }
  a6:	10 92 61 00 	sts	0x0061, r1
  aa:	10 92 60 00 	sts	0x0060, r1
}
  ae:	9f 91       	pop	r25
  b0:	8f 91       	pop	r24
  b2:	0f 90       	pop	r0
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	0f 90       	pop	r0
  b8:	1f 90       	pop	r1
  ba:	18 95       	reti

000000bc <main>:


 main(void)
{ int i ;
	
	DDRC=0XFF ; DDRA=0XFF ;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	84 bb       	out	0x14, r24	; 20
  c0:	8a bb       	out	0x1a, r24	; 26
	PORTC=0X00 ;PORTA=0X00 ;
  c2:	15 ba       	out	0x15, r1	; 21
  c4:	1b ba       	out	0x1b, r1	; 27
	
	PORTD=0XFF ;
  c6:	82 bb       	out	0x12, r24	; 18
	
	//step1 enable GIE bit
	SET_BIT(SREG, 7) ; // Enable GIE
  c8:	8f b7       	in	r24, 0x3f	; 63
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	8f bf       	out	0x3f, r24	; 63
	
	//step2 enable interrupt bit (external - timer - ...)
	//External INT
	SET_BIT(GICR,6) ; // Enable INT0	
  ce:	8b b7       	in	r24, 0x3b	; 59
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	8b bf       	out	0x3b, r24	; 59
	
   //step3 setting of interrupt	
	SET_BIT(MCUCR,0); SET_BIT(MCUCR,1);  // Rising edge  
  d4:	85 b7       	in	r24, 0x35	; 53
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	85 bf       	out	0x35, r24	; 53
  da:	85 b7       	in	r24, 0x35	; 53
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	85 bf       	out	0x35, r24	; 53
 //SET_BIT(MCUCR,0); CLEAR_BIT(MCUCR,1);//try it 
	
	
	while(1)
	{
		for(i=0;i<=9;i++) {	PORTC=i; _delay_ms(1000); }
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	20 e0       	ldi	r18, 0x00	; 0
  e8:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	4f e3       	ldi	r20, 0x3F	; 63
  ec:	5d e0       	ldi	r21, 0x0D	; 13
  ee:	63 e0       	ldi	r22, 0x03	; 3
  f0:	41 50       	subi	r20, 0x01	; 1
  f2:	50 40       	sbci	r21, 0x00	; 0
  f4:	60 40       	sbci	r22, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x34>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x3e>
  fa:	00 00       	nop
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	8a 30       	cpi	r24, 0x0A	; 10
 100:	91 05       	cpc	r25, r1
 102:	94 f3       	brlt	.-28     	; 0xe8 <main+0x2c>
 104:	83 2f       	mov	r24, r19
 106:	92 2f       	mov	r25, r18
 108:	ef cf       	rjmp	.-34     	; 0xe8 <main+0x2c>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
