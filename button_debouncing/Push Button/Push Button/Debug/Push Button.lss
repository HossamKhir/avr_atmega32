
Push Button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000131  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d7  00000000  00000000  000002d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000016c  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001c7  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000f4  00000000  00000000  00000707  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000007fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<util/delay.h>

int main(void)
{
	int i=0 ,j=0; 
	DDRC=255 ;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	DDRA=255 ;
  70:	8a bb       	out	0x1a, r24	; 26
	DDRD=0 ;
  72:	11 ba       	out	0x11, r1	; 17

    int flag= 0 ;
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	30 e0       	ldi	r19, 0x00	; 0
#include <avr/io.h>
#include<util/delay.h>

int main(void)
{
	int i=0 ,j=0; 
  78:	40 e0       	ldi	r20, 0x00	; 0
  7a:	50 e0       	ldi	r21, 0x00	; 0
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
	
    while(1)
	{
	// first solution 
	if(GET_BIT(PIND,0)==0)
    {    PORTC=(1<<i) ; 
  80:	61 e0       	ldi	r22, 0x01	; 1
  82:	70 e0       	ldi	r23, 0x00	; 0
		 if(i<4) {i++;}
		 else {i=0;}	  
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	06 c0       	rjmp	.+12     	; 0x96 <main+0x2a>
		
		
		if((GET_BIT(PIND,1)==0)&&(flag==0))
		{   PORTA=(1<<j) ;
			if(j<4) {j++;}  else {j=0;}
			flag=1 ;
  8a:	9b 01       	movw	r18, r22
	// second solution 
		
		
		if((GET_BIT(PIND,1)==0)&&(flag==0))
		{   PORTA=(1<<j) ;
			if(j<4) {j++;}  else {j=0;}
  8c:	4b 2f       	mov	r20, r27
  8e:	5a 2f       	mov	r21, r26
  90:	02 c0       	rjmp	.+4      	; 0x96 <main+0x2a>
			flag=1 ;
		}
		else if ((GET_BIT(PIND,1)==1)&&(flag==1)) {flag=0 ;}
  92:	2b 2f       	mov	r18, r27
  94:	3a 2f       	mov	r19, r26
    int flag= 0 ;
	
    while(1)
	{
	// first solution 
	if(GET_BIT(PIND,0)==0)
  96:	80 99       	sbic	0x10, 0	; 16
  98:	18 c0       	rjmp	.+48     	; 0xca <main+0x5e>
    {    PORTC=(1<<i) ; 
  9a:	fb 01       	movw	r30, r22
  9c:	08 2e       	mov	r0, r24
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <main+0x38>
  a0:	ee 0f       	add	r30, r30
  a2:	ff 1f       	adc	r31, r31
  a4:	0a 94       	dec	r0
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <main+0x34>
  a8:	e5 bb       	out	0x15, r30	; 21
		 if(i<4) {i++;}
  aa:	84 30       	cpi	r24, 0x04	; 4
  ac:	91 05       	cpc	r25, r1
  ae:	14 f4       	brge	.+4      	; 0xb4 <main+0x48>
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <main+0x4c>
		 else {i=0;}	  
  b4:	8b 2f       	mov	r24, r27
  b6:	9a 2f       	mov	r25, r26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	cf e3       	ldi	r28, 0x3F	; 63
  ba:	ed e0       	ldi	r30, 0x0D	; 13
  bc:	f3 e0       	ldi	r31, 0x03	; 3
  be:	c1 50       	subi	r28, 0x01	; 1
  c0:	e0 40       	sbci	r30, 0x00	; 0
  c2:	f0 40       	sbci	r31, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x52>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x5c>
  c8:	00 00       	nop
	
	
	// second solution 
		
		
		if((GET_BIT(PIND,1)==0)&&(flag==0))
  ca:	81 99       	sbic	0x10, 1	; 16
  cc:	12 c0       	rjmp	.+36     	; 0xf2 <main+0x86>
  ce:	21 15       	cp	r18, r1
  d0:	31 05       	cpc	r19, r1
  d2:	79 f4       	brne	.+30     	; 0xf2 <main+0x86>
		{   PORTA=(1<<j) ;
  d4:	9b 01       	movw	r18, r22
  d6:	04 2e       	mov	r0, r20
  d8:	02 c0       	rjmp	.+4      	; 0xde <main+0x72>
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <main+0x6e>
  e2:	2b bb       	out	0x1b, r18	; 27
			if(j<4) {j++;}  else {j=0;}
  e4:	44 30       	cpi	r20, 0x04	; 4
  e6:	51 05       	cpc	r21, r1
  e8:	84 f6       	brge	.-96     	; 0x8a <main+0x1e>
  ea:	4f 5f       	subi	r20, 0xFF	; 255
  ec:	5f 4f       	sbci	r21, 0xFF	; 255
			flag=1 ;
  ee:	9b 01       	movw	r18, r22
  f0:	d2 cf       	rjmp	.-92     	; 0x96 <main+0x2a>
		}
		else if ((GET_BIT(PIND,1)==1)&&(flag==1)) {flag=0 ;}
  f2:	81 9b       	sbis	0x10, 1	; 16
  f4:	d0 cf       	rjmp	.-96     	; 0x96 <main+0x2a>
  f6:	21 30       	cpi	r18, 0x01	; 1
  f8:	31 05       	cpc	r19, r1
  fa:	69 f6       	brne	.-102    	; 0x96 <main+0x2a>
  fc:	ca cf       	rjmp	.-108    	; 0x92 <main+0x26>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
