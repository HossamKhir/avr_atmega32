
External and priority INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000172  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000227  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000010f  00000000  00000000  0000044d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001ab  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  00000708  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001ef  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000f1  00000000  00000000  00000977  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  74:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:

int j=0 , k=0;

#define F_CPU 1000000UL

ISR(INT0_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
	PORTB =255 ;
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f e3       	ldi	r18, 0x3F	; 63
  92:	8d e0       	ldi	r24, 0x0D	; 13
  94:	93 e0       	ldi	r25, 0x03	; 3
  96:	21 50       	subi	r18, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <__vector_1+0x1a>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <__vector_1+0x24>
  a0:	00 00       	nop
	_delay_ms(1000);
	PORTB =0 ;
  a2:	18 ba       	out	0x18, r1	; 24
  a4:	2f e3       	ldi	r18, 0x3F	; 63
  a6:	8d e0       	ldi	r24, 0x0D	; 13
  a8:	93 e0       	ldi	r25, 0x03	; 3
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <__vector_1+0x2e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <__vector_1+0x38>
  b4:	00 00       	nop
	_delay_ms(1000);
	
}
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	2f 91       	pop	r18
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <__vector_2>:

ISR(INT1_vect){
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	2f 93       	push	r18
  d2:	3f 93       	push	r19
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	SET_BIT(SREG, 7) ; // Enable GIE
  d8:	8f b7       	in	r24, 0x3f	; 63
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	8f bf       	out	0x3f, r24	; 63
  de:	80 e0       	ldi	r24, 0x00	; 0
	//AS controller Automatic Disable All Interrupts (By put GIE by 0 )  in start of any ISR And ReEnable it in end of ISR
	// But here we want Nested INT So We Must Enable GIE At start of Lower Priority To allow Higher priority to Interrupt it
    int g=0 ;
	if(g>9){g=0;}
	for( ;g<=9;g++) {	PORTA=g; _delay_ms(400); }
  e0:	8b bb       	out	0x1b, r24	; 27
  e2:	2f e7       	ldi	r18, 0x7F	; 127
  e4:	38 e3       	ldi	r19, 0x38	; 56
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	30 40       	sbci	r19, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <__vector_2+0x22>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <__vector_2+0x2c>
  f2:	00 00       	nop
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	8a 30       	cpi	r24, 0x0A	; 10
  f8:	99 f7       	brne	.-26     	; 0xe0 <__vector_2+0x1a>
	
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	3f 91       	pop	r19
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <main>:

int main(void)
{ int i ;
	
	
	DDRC=0XFF ; DDRA=0XFF ;DDRB=0XFF ;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	84 bb       	out	0x14, r24	; 20
 110:	8a bb       	out	0x1a, r24	; 26
 112:	87 bb       	out	0x17, r24	; 23
	
	PORTC=0X00 ;PORTA=0X00 ;
 114:	15 ba       	out	0x15, r1	; 21
 116:	1b ba       	out	0x1b, r1	; 27
	
	PORTD=0XFF ;
 118:	82 bb       	out	0x12, r24	; 18
	

	
	SET_BIT(SREG, 7) ; // Enable GIE
 11a:	8f b7       	in	r24, 0x3f	; 63
 11c:	80 68       	ori	r24, 0x80	; 128
 11e:	8f bf       	out	0x3f, r24	; 63
	
	//External INT
	SET_BIT(GICR,6) ; // Enable INT0
 120:	8b b7       	in	r24, 0x3b	; 59
 122:	80 64       	ori	r24, 0x40	; 64
 124:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GICR,7) ; // Enable INT1
 126:	8b b7       	in	r24, 0x3b	; 59
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	8b bf       	out	0x3b, r24	; 59
	
	SET_BIT(MCUCR,0); SET_BIT(MCUCR,1);  // Rising edge
 12c:	85 b7       	in	r24, 0x35	; 53
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	85 bf       	out	0x35, r24	; 53
 132:	85 b7       	in	r24, 0x35	; 53
 134:	82 60       	ori	r24, 0x02	; 2
 136:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,2);SET_BIT(MCUCR,3);  // Rising edge
 138:	85 b7       	in	r24, 0x35	; 53
 13a:	84 60       	ori	r24, 0x04	; 4
 13c:	85 bf       	out	0x35, r24	; 53
 13e:	85 b7       	in	r24, 0x35	; 53
 140:	88 60       	ori	r24, 0x08	; 8
 142:	85 bf       	out	0x35, r24	; 53
	

	
	while(1)
	{
	for(i=0;i<=9;i++) {	PORTC=i; _delay_ms(400); }
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	85 bb       	out	0x15, r24	; 21
 14e:	4f e7       	ldi	r20, 0x7F	; 127
 150:	58 e3       	ldi	r21, 0x38	; 56
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	41 50       	subi	r20, 0x01	; 1
 156:	50 40       	sbci	r21, 0x00	; 0
 158:	60 40       	sbci	r22, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0x48>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0x52>
 15e:	00 00       	nop
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	8a 30       	cpi	r24, 0x0A	; 10
 164:	91 05       	cpc	r25, r1
 166:	94 f3       	brlt	.-28     	; 0x14c <main+0x40>
 168:	83 2f       	mov	r24, r19
 16a:	92 2f       	mov	r25, r18
 16c:	ef cf       	rjmp	.-34     	; 0x14c <main+0x40>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
