
7segment without BCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000130  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000015a  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000fa  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000165  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001f6  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000146  00000000  00000000  000007e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <util/delay.h> // to use delay function

// 7segment with BCD single and multi press

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char g=1 , d=1;
	unsigned char sev_seg[10]={0b11000000,0b11111001,0b10100100,0b10110000,0b10011001, 0b10010010,0b10000010,0b11111000,0b10000000,0b10010000};
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
    unsigned char flag=0 ;
	DDRC=0XFF ;   // O/P
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 bb       	out	0x14, r24	; 20
	
	PORTC=0b11000000 ; // OUT 00000000
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	85 bb       	out	0x15, r24	; 21
	
	CLR_BIT(DDRB,0);  CLR_BIT(DDRB,1) ; // I/P
  b0:	b8 98       	cbi	0x17, 0	; 23
  b2:	b9 98       	cbi	0x17, 1	; 23
	SET_BIT(PORTB,0);  	SET_BIT(PORTB,1); // PULL UP RESISTOR
  b4:	c0 9a       	sbi	0x18, 0	; 24
  b6:	c1 9a       	sbi	0x18, 1	; 24
	

	flag=0 ;
  b8:	90 e0       	ldi	r25, 0x00	; 0
// 7segment with BCD single and multi press

int main(void)
{
	
	unsigned char g=1 , d=1;
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	81 e0       	ldi	r24, 0x01	; 1
	{
		
		
		if(GET_BIT(PINB,0)==0) { if(g<=9) {PORTC=sev_seg[g] ; g++ ; _delay_ms(300);d=g;}
		
		                          else     {g=0; }
  be:	30 e0       	ldi	r19, 0x00	; 0
                            	}
	
	
	
	if((GET_BIT(PINB,1)==0)&&(flag==0)) { flag=1 ; if(d<=9) {PORTC=sev_seg[d] ; d++ ;g=d; }
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <main+0x44>
	
	                                                  else     {d=1;PORTC=sev_seg[0]  ; }
	
                                        }

   else if(GET_BIT(PINB,1)==1)	{	    flag=0 ;}
  c4:	93 2f       	mov	r25, r19

	while(1)
	{
		
		
		if(GET_BIT(PINB,0)==0) { if(g<=9) {PORTC=sev_seg[g] ; g++ ; _delay_ms(300);d=g;}
  c6:	b0 99       	sbic	0x16, 0	; 22
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <main+0x76>
  ca:	8a 30       	cpi	r24, 0x0A	; 10
  cc:	a0 f4       	brcc	.+40     	; 0xf6 <main+0x74>
  ce:	e1 e0       	ldi	r30, 0x01	; 1
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	ec 0f       	add	r30, r28
  d4:	fd 1f       	adc	r31, r29
  d6:	e8 0f       	add	r30, r24
  d8:	f1 1d       	adc	r31, r1
  da:	20 81       	ld	r18, Z
  dc:	25 bb       	out	0x15, r18	; 21
  de:	8f 5f       	subi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f e5       	ldi	r18, 0x5F	; 95
  e2:	5a ee       	ldi	r21, 0xEA	; 234
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	50 40       	sbci	r21, 0x00	; 0
  ea:	60 40       	sbci	r22, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x64>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x6e>
  f0:	00 00       	nop
  f2:	28 2f       	mov	r18, r24
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <main+0x76>
		
		                          else     {g=0; }
  f6:	83 2f       	mov	r24, r19
                            	}
	
	
	
	if((GET_BIT(PINB,1)==0)&&(flag==0)) { flag=1 ; if(d<=9) {PORTC=sev_seg[d] ; d++ ;g=d; }
  f8:	b1 99       	sbic	0x16, 1	; 22
  fa:	15 c0       	rjmp	.+42     	; 0x126 <main+0xa4>
  fc:	91 11       	cpse	r25, r1
  fe:	13 c0       	rjmp	.+38     	; 0x126 <main+0xa4>
 100:	2a 30       	cpi	r18, 0x0A	; 10
 102:	60 f4       	brcc	.+24     	; 0x11c <main+0x9a>
 104:	e1 e0       	ldi	r30, 0x01	; 1
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	ec 0f       	add	r30, r28
 10a:	fd 1f       	adc	r31, r29
 10c:	e2 0f       	add	r30, r18
 10e:	f1 1d       	adc	r31, r1
 110:	80 81       	ld	r24, Z
 112:	85 bb       	out	0x15, r24	; 21
 114:	2f 5f       	subi	r18, 0xFF	; 255
 116:	82 2f       	mov	r24, r18
 118:	94 2f       	mov	r25, r20
 11a:	d5 cf       	rjmp	.-86     	; 0xc6 <main+0x44>
	
	                                                  else     {d=1;PORTC=sev_seg[0]  ; }
 11c:	99 81       	ldd	r25, Y+1	; 0x01
 11e:	95 bb       	out	0x15, r25	; 21
		                          else     {g=0; }
                            	}
	
	
	
	if((GET_BIT(PINB,1)==0)&&(flag==0)) { flag=1 ; if(d<=9) {PORTC=sev_seg[d] ; d++ ;g=d; }
 120:	94 2f       	mov	r25, r20
	
	                                                  else     {d=1;PORTC=sev_seg[0]  ; }
 122:	24 2f       	mov	r18, r20
 124:	d0 cf       	rjmp	.-96     	; 0xc6 <main+0x44>
	
                                        }

   else if(GET_BIT(PINB,1)==1)	{	    flag=0 ;}
 126:	b1 99       	sbic	0x16, 1	; 22
 128:	cd cf       	rjmp	.-102    	; 0xc4 <main+0x42>
 12a:	cd cf       	rjmp	.-102    	; 0xc6 <main+0x44>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
