
keypad_lcd_password.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001d4  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001e6  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000014e  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001da  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000058  00000000  00000000  000007d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b8  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000181  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000b69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  8a:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keypad_init>:


#include "keypad.h"
void keypad_init()
{
	keypad_DDR =0xf0; //A0....A3 are inputs and A4....A7 are outputs
  92:	80 ef       	ldi	r24, 0xF0	; 240
  94:	81 bb       	out	0x11, r24	; 17
	KEYPAD_PORT=0xff;//A0....A3 are pull up and A4....A7 are initialized by 5 volt
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	82 bb       	out	0x12, r24	; 18
  9a:	08 95       	ret

0000009c <KeyPad_getpressedkey>:
	 //  3-b-else { there is no pressed so continue in for loop of cols to chech another col
		 
		
		//KEYPAD_PORT=(KEYPAD_PORT | 0xf0);//check c0 c1 c2 c3 are 1111
  
CLR_BIT(KEYPAD_PORT,(col_index+4));//clear col c0 on bit4 -  c1 on bit5
  9c:	94 98       	cbi	0x12, 4	; 18

	//	_delay_ms(1);//delay

		rows_val= GET_LOWER_NIBBLE(KEYPAD_ROWS); // KEYPAD_ROWS == PIND
  9e:	60 b3       	in	r22, 0x10	; 16
  a0:	6f 70       	andi	r22, 0x0F	; 15
  a2:	60 bb       	out	0x10, r22	; 16

		if(rows_val != 0x0F) // not equal 1111  // that means there is switch pressed 
  a4:	6f 30       	cpi	r22, 0x0F	; 15
  a6:	09 f4       	brne	.+2      	; 0xaa <KeyPad_getpressedkey+0xe>
  a8:	7b c0       	rjmp	.+246    	; 0x1a0 <KeyPad_getpressedkey+0x104>
  aa:	12 c0       	rjmp	.+36     	; 0xd0 <KeyPad_getpressedkey+0x34>
	 //  3-b-else { there is no pressed so continue in for loop of cols to chech another col
		 
		
		//KEYPAD_PORT=(KEYPAD_PORT | 0xf0);//check c0 c1 c2 c3 are 1111
  
CLR_BIT(KEYPAD_PORT,(col_index+4));//clear col c0 on bit4 -  c1 on bit5
  ac:	62 b3       	in	r22, 0x12	; 18
  ae:	9a 01       	movw	r18, r20
  b0:	08 2e       	mov	r0, r24
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <KeyPad_getpressedkey+0x1c>
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <KeyPad_getpressedkey+0x18>
  bc:	e2 2f       	mov	r30, r18
  be:	e0 95       	com	r30
  c0:	6e 23       	and	r22, r30
  c2:	62 bb       	out	0x12, r22	; 18

	//	_delay_ms(1);//delay

		rows_val= GET_LOWER_NIBBLE(KEYPAD_ROWS); // KEYPAD_ROWS == PIND
  c4:	60 b3       	in	r22, 0x10	; 16
  c6:	6f 70       	andi	r22, 0x0F	; 15
  c8:	60 bb       	out	0x10, r22	; 16

		if(rows_val != 0x0F) // not equal 1111  // that means there is switch pressed 
  ca:	6f 30       	cpi	r22, 0x0F	; 15
  cc:	41 f0       	breq	.+16     	; 0xde <KeyPad_getpressedkey+0x42>
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <KeyPad_getpressedkey+0x36>
{
	unsigned char col_index = 0; // counter  For loop
	unsigned char rows_val = 0; // get the value of rows in this variable
	unsigned char key = NO_PRESSED_KEY; // 0xff

	for(col_index=0;col_index<4;col_index++)
  d0:	70 e0       	ldi	r23, 0x00	; 0

		rows_val= GET_LOWER_NIBBLE(KEYPAD_ROWS); // KEYPAD_ROWS == PIND

		if(rows_val != 0x0F) // not equal 1111  // that means there is switch pressed 
		{
			while((GET_LOWER_NIBBLE(KEYPAD_ROWS)) != 0x0F);// single pressing // wait till user let the switch 
  d2:	80 b3       	in	r24, 0x10	; 16
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	80 bb       	out	0x10, r24	; 16
  d8:	8f 30       	cpi	r24, 0x0F	; 15
  da:	d9 f7       	brne	.-10     	; 0xd2 <KeyPad_getpressedkey+0x36>
  dc:	09 c0       	rjmp	.+18     	; 0xf0 <KeyPad_getpressedkey+0x54>
			break; // breaking for loop and going to  if(col_index == 4) 
		}
		
SET_BIT(KEYPAD_PORT,(col_index+4));//set col  // if occurred : that means there is no pressing so go to for loop to complete it c0:c3 
  de:	32 b3       	in	r19, 0x12	; 18
  e0:	23 2b       	or	r18, r19
  e2:	22 bb       	out	0x12, r18	; 18
{
	unsigned char col_index = 0; // counter  For loop
	unsigned char rows_val = 0; // get the value of rows in this variable
	unsigned char key = NO_PRESSED_KEY; // 0xff

	for(col_index=0;col_index<4;col_index++)
  e4:	7f 5f       	subi	r23, 0xFF	; 255
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	74 30       	cpi	r23, 0x04	; 4
  ea:	01 f7       	brne	.-64     	; 0xac <KeyPad_getpressedkey+0x10>
	}


	if(col_index == 4)
	{
		return NO_PRESSED_KEY;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	08 95       	ret
		
SET_BIT(KEYPAD_PORT,(col_index+4));//set col  // if occurred : that means there is no pressing so go to for loop to complete it c0:c3 
	}


	if(col_index == 4)
  f0:	74 30       	cpi	r23, 0x04	; 4
  f2:	09 f4       	brne	.+2      	; 0xf6 <KeyPad_getpressedkey+0x5a>
  f4:	49 c0       	rjmp	.+146    	; 0x188 <KeyPad_getpressedkey+0xec>
	{
		return NO_PRESSED_KEY;
	}
	else
	{
		switch(col_index)
  f6:	71 30       	cpi	r23, 0x01	; 1
  f8:	c1 f0       	breq	.+48     	; 0x12a <KeyPad_getpressedkey+0x8e>
  fa:	28 f0       	brcs	.+10     	; 0x106 <KeyPad_getpressedkey+0x6a>
  fc:	72 30       	cpi	r23, 0x02	; 2
  fe:	39 f1       	breq	.+78     	; 0x14e <KeyPad_getpressedkey+0xb2>
 100:	73 30       	cpi	r23, 0x03	; 3
 102:	b9 f1       	breq	.+110    	; 0x172 <KeyPad_getpressedkey+0xd6>
 104:	43 c0       	rjmp	.+134    	; 0x18c <KeyPad_getpressedkey+0xf0>
		{
			// Col_index = 0
			case 0:
			switch(rows_val)
 106:	6b 30       	cpi	r22, 0x0B	; 11
 108:	61 f0       	breq	.+24     	; 0x122 <KeyPad_getpressedkey+0x86>
 10a:	18 f4       	brcc	.+6      	; 0x112 <KeyPad_getpressedkey+0x76>
 10c:	67 30       	cpi	r22, 0x07	; 7
 10e:	59 f0       	breq	.+22     	; 0x126 <KeyPad_getpressedkey+0x8a>
 110:	04 c0       	rjmp	.+8      	; 0x11a <KeyPad_getpressedkey+0x7e>
 112:	6d 30       	cpi	r22, 0x0D	; 13
 114:	21 f0       	breq	.+8      	; 0x11e <KeyPad_getpressedkey+0x82>
 116:	6e 30       	cpi	r22, 0x0E	; 14
 118:	d9 f1       	breq	.+118    	; 0x190 <KeyPad_getpressedkey+0xf4>

unsigned char KeyPad_getpressedkey(void)
{
	unsigned char col_index = 0; // counter  For loop
	unsigned char rows_val = 0; // get the value of rows in this variable
	unsigned char key = NO_PRESSED_KEY; // 0xff
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	08 95       	ret
			{
				case 0x0E:   // 0000 1110
				 key = 7;
				break;
				case 0x0D:  //  0000 1101
				key = 4;
 11e:	84 e0       	ldi	r24, 0x04	; 4
				break;
 120:	08 95       	ret
				case 0x0B:  //  0000 1011
				key = 1;
 122:	81 e0       	ldi	r24, 0x01	; 1
				break;
 124:	08 95       	ret
				case 0x07:   // 0000 0111 // on
				key = 100;
 126:	84 e6       	ldi	r24, 0x64	; 100
				break;
 128:	08 95       	ret
			}
			break;

			// Col_index = 1
			case 1:
			switch(rows_val)
 12a:	6b 30       	cpi	r22, 0x0B	; 11
 12c:	61 f0       	breq	.+24     	; 0x146 <KeyPad_getpressedkey+0xaa>
 12e:	18 f4       	brcc	.+6      	; 0x136 <KeyPad_getpressedkey+0x9a>
 130:	67 30       	cpi	r22, 0x07	; 7
 132:	59 f0       	breq	.+22     	; 0x14a <KeyPad_getpressedkey+0xae>
 134:	04 c0       	rjmp	.+8      	; 0x13e <KeyPad_getpressedkey+0xa2>
 136:	6d 30       	cpi	r22, 0x0D	; 13
 138:	21 f0       	breq	.+8      	; 0x142 <KeyPad_getpressedkey+0xa6>
 13a:	6e 30       	cpi	r22, 0x0E	; 14
 13c:	59 f1       	breq	.+86     	; 0x194 <KeyPad_getpressedkey+0xf8>

unsigned char KeyPad_getpressedkey(void)
{
	unsigned char col_index = 0; // counter  For loop
	unsigned char rows_val = 0; // get the value of rows in this variable
	unsigned char key = NO_PRESSED_KEY; // 0xff
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	08 95       	ret
			{
				case 0x0E:   // 1110
				key = 8;
				break;
				case 0x0D:   //1101
				key = 5;
 142:	85 e0       	ldi	r24, 0x05	; 5
				break;
 144:	08 95       	ret
				case 0x0B:
				key = 2;
 146:	82 e0       	ldi	r24, 0x02	; 2
				break;
 148:	08 95       	ret
				case 0x07:
				key = 0;
 14a:	80 e0       	ldi	r24, 0x00	; 0
				break;
 14c:	08 95       	ret
			}
			break;
			
			// Col2
			case 2:
			switch(rows_val)
 14e:	6b 30       	cpi	r22, 0x0B	; 11
 150:	61 f0       	breq	.+24     	; 0x16a <KeyPad_getpressedkey+0xce>
 152:	18 f4       	brcc	.+6      	; 0x15a <KeyPad_getpressedkey+0xbe>
 154:	67 30       	cpi	r22, 0x07	; 7
 156:	59 f0       	breq	.+22     	; 0x16e <KeyPad_getpressedkey+0xd2>
 158:	04 c0       	rjmp	.+8      	; 0x162 <KeyPad_getpressedkey+0xc6>
 15a:	6d 30       	cpi	r22, 0x0D	; 13
 15c:	21 f0       	breq	.+8      	; 0x166 <KeyPad_getpressedkey+0xca>
 15e:	6e 30       	cpi	r22, 0x0E	; 14
 160:	d9 f0       	breq	.+54     	; 0x198 <KeyPad_getpressedkey+0xfc>

unsigned char KeyPad_getpressedkey(void)
{
	unsigned char col_index = 0; // counter  For loop
	unsigned char rows_val = 0; // get the value of rows in this variable
	unsigned char key = NO_PRESSED_KEY; // 0xff
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	08 95       	ret
			{
				case 0x0E:  // 1110
				key = 9;
				break;
				case 0x0D:  // 1101
				key = 6;
 166:	86 e0       	ldi	r24, 0x06	; 6
				break;
 168:	08 95       	ret
				case 0x0B:  // 1011
				key = 3;
 16a:	83 e0       	ldi	r24, 0x03	; 3
				break;
 16c:	08 95       	ret
				case 0x07:  // 0111
				key = 100;
 16e:	84 e6       	ldi	r24, 0x64	; 100
				break;
 170:	08 95       	ret
			}
			break;
			
			// Col3
			case 3:
			switch(rows_val)
 172:	6b 30       	cpi	r22, 0x0B	; 11
 174:	99 f0       	breq	.+38     	; 0x19c <KeyPad_getpressedkey+0x100>
 176:	18 f4       	brcc	.+6      	; 0x17e <KeyPad_getpressedkey+0xe2>
 178:	67 30       	cpi	r22, 0x07	; 7
 17a:	81 f0       	breq	.+32     	; 0x19c <KeyPad_getpressedkey+0x100>
 17c:	03 c0       	rjmp	.+6      	; 0x184 <KeyPad_getpressedkey+0xe8>
 17e:	6d 50       	subi	r22, 0x0D	; 13
 180:	62 30       	cpi	r22, 0x02	; 2
 182:	60 f0       	brcs	.+24     	; 0x19c <KeyPad_getpressedkey+0x100>

unsigned char KeyPad_getpressedkey(void)
{
	unsigned char col_index = 0; // counter  For loop
	unsigned char rows_val = 0; // get the value of rows in this variable
	unsigned char key = NO_PRESSED_KEY; // 0xff
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	08 95       	ret
	}


	if(col_index == 4)
	{
		return NO_PRESSED_KEY;
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	08 95       	ret

unsigned char KeyPad_getpressedkey(void)
{
	unsigned char col_index = 0; // counter  For loop
	unsigned char rows_val = 0; // get the value of rows in this variable
	unsigned char key = NO_PRESSED_KEY; // 0xff
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	08 95       	ret
			// Col_index = 0
			case 0:
			switch(rows_val)
			{
				case 0x0E:   // 0000 1110
				 key = 7;
 190:	87 e0       	ldi	r24, 0x07	; 7
 192:	08 95       	ret
			// Col_index = 1
			case 1:
			switch(rows_val)
			{
				case 0x0E:   // 1110
				key = 8;
 194:	88 e0       	ldi	r24, 0x08	; 8
 196:	08 95       	ret
			// Col2
			case 2:
			switch(rows_val)
			{
				case 0x0E:  // 1110
				key = 9;
 198:	89 e0       	ldi	r24, 0x09	; 9
 19a:	08 95       	ret
			// Col3
			case 3:
			switch(rows_val)
			{
				case 0x0E:
				key = 100;
 19c:	84 e6       	ldi	r24, 0x64	; 100
 19e:	08 95       	ret
		{
			while((GET_LOWER_NIBBLE(KEYPAD_ROWS)) != 0x0F);// single pressing // wait till user let the switch 
			break; // breaking for loop and going to  if(col_index == 4) 
		}
		
SET_BIT(KEYPAD_PORT,(col_index+4));//set col  // if occurred : that means there is no pressing so go to for loop to complete it c0:c3 
 1a0:	94 9a       	sbi	0x12, 4	; 18
 1a2:	85 e0       	ldi	r24, 0x05	; 5
 1a4:	90 e0       	ldi	r25, 0x00	; 0
{
	unsigned char col_index = 0; // counter  For loop
	unsigned char rows_val = 0; // get the value of rows in this variable
	unsigned char key = NO_PRESSED_KEY; // 0xff

	for(col_index=0;col_index<4;col_index++)
 1a6:	71 e0       	ldi	r23, 0x01	; 1
	 //  3-b-else { there is no pressed so continue in for loop of cols to chech another col
		 
		
		//KEYPAD_PORT=(KEYPAD_PORT | 0xf0);//check c0 c1 c2 c3 are 1111
  
CLR_BIT(KEYPAD_PORT,(col_index+4));//clear col c0 on bit4 -  c1 on bit5
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	7f cf       	rjmp	.-258    	; 0xac <KeyPad_getpressedkey+0x10>

000001ae <main>:
 int main(void)
{   

//7SEG

DDRC=0XFF ;   // O/P
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	84 bb       	out	0x14, r24	; 20
PORTC=0X00 ; // OUT 00000000	
 1b2:	15 ba       	out	0x15, r1	; 21
PORTC=0;
 1b4:	15 ba       	out	0x15, r1	; 21
int g=0,o=0; 		
				

	keypad_init() ;  int keyy ;
 1b6:	0e 94 49 00 	call	0x92	; 0x92 <keypad_init>
	
   while(1)
	{
		
	keyy=KeyPad_getpressedkey()  ;
 1ba:	0e 94 4e 00 	call	0x9c	; 0x9c <KeyPad_getpressedkey>
		
		if ((keyy>=0) && (keyy<=9)) 
 1be:	8a 30       	cpi	r24, 0x0A	; 10
 1c0:	e0 f7       	brcc	.-8      	; 0x1ba <main+0xc>
	keypad_init() ;  int keyy ;
	
   while(1)
	{
		
	keyy=KeyPad_getpressedkey()  ;
 1c2:	e8 2f       	mov	r30, r24
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
		
		if ((keyy>=0) && (keyy<=9)) 
		{	PORTC=sev_seg[keyy] ;	
 1c6:	e0 5a       	subi	r30, 0xA0	; 160
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	80 81       	ld	r24, Z
 1cc:	85 bb       	out	0x15, r24	; 21
 1ce:	f5 cf       	rjmp	.-22     	; 0x1ba <main+0xc>

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
