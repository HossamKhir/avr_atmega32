
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002ed  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000011b  00000000  00000000  000004b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001a9  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001ba  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000036  00000000  00000000  0000096e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	
	
	//  OCF0 : Output Compare Flag 0
	//  TOV0 : Timer/Counter0 Overflow Flag
	
	SET_BIT(DDRB,3) ; // you must configure OC0 as o/p
  6c:	bb 9a       	sbi	0x17, 3	; 23
	
	SET_BIT(TCCR0,WGM01);SET_BIT(TCCR0,WGM00); // Fast PWM Mode
  6e:	83 b7       	in	r24, 0x33	; 51
  70:	88 60       	ori	r24, 0x08	; 8
  72:	83 bf       	out	0x33, r24	; 51
  74:	83 b7       	in	r24, 0x33	; 51
  76:	80 64       	ori	r24, 0x40	; 64
  78:	83 bf       	out	0x33, r24	; 51
	
	SET_BIT(TCCR0,COM01);CLEAR_BIT(TCCR0,COM00); //  Clear OC0 on compare match, set OC0 at BOTTOM, (non-inverting mode)
  7a:	83 b7       	in	r24, 0x33	; 51
  7c:	80 62       	ori	r24, 0x20	; 32
  7e:	83 bf       	out	0x33, r24	; 51
  80:	83 b7       	in	r24, 0x33	; 51
  82:	8f 7e       	andi	r24, 0xEF	; 239
  84:	83 bf       	out	0x33, r24	; 51
	
    SET_BIT(TCCR0,0);CLEAR_BIT(TCCR0,1);SET_BIT(TCCR0,2); // clk/1024 (prescaler)
  86:	83 b7       	in	r24, 0x33	; 51
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	83 bf       	out	0x33, r24	; 51
  8c:	83 b7       	in	r24, 0x33	; 51
  8e:	8d 7f       	andi	r24, 0xFD	; 253
  90:	83 bf       	out	0x33, r24	; 51
  92:	83 b7       	in	r24, 0x33	; 51
  94:	84 60       	ori	r24, 0x04	; 4
  96:	83 bf       	out	0x33, r24	; 51
void PWM_DUTY(unsigned int duty)
{ // put value from 0 : 100  %
	
	//OCR0=(duty*255)/100;
	
	OCR0=( (duty*256.0)/100.0) -1 ;
  98:	48 e1       	ldi	r20, 0x18	; 24
  9a:	32 e3       	ldi	r19, 0x32	; 50
  9c:	2f e7       	ldi	r18, 0x7F	; 127
  9e:	9f eb       	ldi	r25, 0xBF	; 191
  a0:	8f ef       	ldi	r24, 0xFF	; 255

	
	while(1)
	{
		
		OCR0=0 ;  //to be  0%   but in real impossible as dutycycle = [(OCR0+1)/256]*100  SO ALWAYS Duty cycle will be value , can not be ZERO
  a2:	1c be       	out	0x3c, r1	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	5f eb       	ldi	r21, 0xBF	; 191
  a6:	67 e2       	ldi	r22, 0x27	; 39
  a8:	79 e0       	ldi	r23, 0x09	; 9
  aa:	51 50       	subi	r21, 0x01	; 1
  ac:	60 40       	sbci	r22, 0x00	; 0
  ae:	70 40       	sbci	r23, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x3e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x48>
  b4:	00 00       	nop
void PWM_DUTY(unsigned int duty)
{ // put value from 0 : 100  %
	
	//OCR0=(duty*255)/100;
	
	OCR0=( (duty*256.0)/100.0) -1 ;
  b6:	4c bf       	out	0x3c, r20	; 60
  b8:	5f eb       	ldi	r21, 0xBF	; 191
  ba:	67 e2       	ldi	r22, 0x27	; 39
  bc:	79 e0       	ldi	r23, 0x09	; 9
  be:	51 50       	subi	r21, 0x01	; 1
  c0:	60 40       	sbci	r22, 0x00	; 0
  c2:	70 40       	sbci	r23, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x52>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x5c>
  c8:	00 00       	nop
  ca:	3c bf       	out	0x3c, r19	; 60
  cc:	5f eb       	ldi	r21, 0xBF	; 191
  ce:	67 e2       	ldi	r22, 0x27	; 39
  d0:	79 e0       	ldi	r23, 0x09	; 9
  d2:	51 50       	subi	r21, 0x01	; 1
  d4:	60 40       	sbci	r22, 0x00	; 0
  d6:	70 40       	sbci	r23, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x66>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x70>
  dc:	00 00       	nop
  de:	2c bf       	out	0x3c, r18	; 60
  e0:	5f eb       	ldi	r21, 0xBF	; 191
  e2:	67 e2       	ldi	r22, 0x27	; 39
  e4:	79 e0       	ldi	r23, 0x09	; 9
  e6:	51 50       	subi	r21, 0x01	; 1
  e8:	60 40       	sbci	r22, 0x00	; 0
  ea:	70 40       	sbci	r23, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x7a>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x84>
  f0:	00 00       	nop
  f2:	9c bf       	out	0x3c, r25	; 60
  f4:	5f eb       	ldi	r21, 0xBF	; 191
  f6:	67 e2       	ldi	r22, 0x27	; 39
  f8:	79 e0       	ldi	r23, 0x09	; 9
  fa:	51 50       	subi	r21, 0x01	; 1
  fc:	60 40       	sbci	r22, 0x00	; 0
  fe:	70 40       	sbci	r23, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x8e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x98>
 104:	00 00       	nop
 106:	8c bf       	out	0x3c, r24	; 60
 108:	5f eb       	ldi	r21, 0xBF	; 191
 10a:	67 e2       	ldi	r22, 0x27	; 39
 10c:	79 e0       	ldi	r23, 0x09	; 9
 10e:	51 50       	subi	r21, 0x01	; 1
 110:	60 40       	sbci	r22, 0x00	; 0
 112:	70 40       	sbci	r23, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0xa2>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0xac>
 118:	00 00       	nop
 11a:	c3 cf       	rjmp	.-122    	; 0xa2 <main+0x36>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
