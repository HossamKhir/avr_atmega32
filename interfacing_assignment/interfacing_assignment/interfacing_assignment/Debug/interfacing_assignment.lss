
interfacing_assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000000f4  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000169  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000010b  00000000  00000000  00000335  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000131  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e5  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000113  00000000  00000000  0000077d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
//declare the 7-segment outputs in an array
int seven_segment[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};

int main(void)
{
	DDRC = 0xFF;	//set port C as o/p
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x7E;	//set pins 0 & 7 of port D as i/p
  86:	8e e7       	ldi	r24, 0x7E	; 126
  88:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x81;	//activate PUR on pins 0 & 7 of port D
  8a:	81 e8       	ldi	r24, 0x81	; 129
  8c:	82 bb       	out	0x12, r24	; 18
	int i = 0, mask_continous = 0x01, mask_event = 0x80, last_time = 0x00;	//declare counter, masks, flag
	PORTC = 0xC0;	//display 0
  8e:	80 ec       	ldi	r24, 0xC0	; 192
  90:	85 bb       	out	0x15, r24	; 21
int main(void)
{
	DDRC = 0xFF;	//set port C as o/p
	DDRD = 0x7E;	//set pins 0 & 7 of port D as i/p
	PORTD = 0x81;	//activate PUR on pins 0 & 7 of port D
	int i = 0, mask_continous = 0x01, mask_event = 0x80, last_time = 0x00;	//declare counter, masks, flag
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	90 e0       	ldi	r25, 0x00	; 0
    while(1)
    {
        //reset condition
		if(i > 9)
		{
			i = 0;
  96:	70 e0       	ldi	r23, 0x00	; 0
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	08 c0       	rjmp	.+16     	; 0xac <main+0x2a>
  9c:	9c 01       	movw	r18, r24
	int i = 0, mask_continous = 0x01, mask_event = 0x80, last_time = 0x00;	//declare counter, masks, flag
	PORTC = 0xC0;	//display 0
    while(1)
    {
        //reset condition
		if(i > 9)
  9e:	2a 30       	cpi	r18, 0x0A	; 10
  a0:	31 05       	cpc	r19, r1
  a2:	14 f4       	brge	.+4      	; 0xa8 <main+0x26>
  a4:	c9 01       	movw	r24, r18
  a6:	02 c0       	rjmp	.+4      	; 0xac <main+0x2a>
		{
			i = 0;
  a8:	87 2f       	mov	r24, r23
  aa:	96 2f       	mov	r25, r22
		}
		
		//reading status for event based increment
		last_time = PIND & mask_event;
  ac:	40 b3       	in	r20, 0x10	; 16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	e7 ea       	ldi	r30, 0xA7	; 167
  b0:	f1 e6       	ldi	r31, 0x61	; 97
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x30>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x36>
  b8:	00 00       	nop
		
		//allow the input to change within a while
		_delay_ms(100);
		
		//check the i/p, and execute the o/p
		if ((mask_continous & ~PIND) || ((mask_event & ~PIND) & last_time))
  ba:	20 b3       	in	r18, 0x10	; 16
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	20 95       	com	r18
  c0:	30 95       	com	r19
  c2:	20 fd       	sbrc	r18, 0
  c4:	0a c0       	rjmp	.+20     	; 0xda <main+0x58>
  c6:	20 b3       	in	r18, 0x10	; 16
		{
			i = 0;
		}
		
		//reading status for event based increment
		last_time = PIND & mask_event;
  c8:	40 78       	andi	r20, 0x80	; 128
  ca:	50 e0       	ldi	r21, 0x00	; 0
		
		//allow the input to change within a while
		_delay_ms(100);
		
		//check the i/p, and execute the o/p
		if ((mask_continous & ~PIND) || ((mask_event & ~PIND) & last_time))
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	20 95       	com	r18
  d0:	30 95       	com	r19
  d2:	24 23       	and	r18, r20
  d4:	35 23       	and	r19, r21
  d6:	23 2b       	or	r18, r19
  d8:	09 f3       	breq	.-62     	; 0x9c <main+0x1a>
		{
			PORTC = seven_segment[i++];	
  da:	9c 01       	movw	r18, r24
  dc:	2f 5f       	subi	r18, 0xFF	; 255
  de:	3f 4f       	sbci	r19, 0xFF	; 255
  e0:	fc 01       	movw	r30, r24
  e2:	ee 0f       	add	r30, r30
  e4:	ff 1f       	adc	r31, r31
  e6:	e0 5a       	subi	r30, 0xA0	; 160
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
  ea:	80 81       	ld	r24, Z
  ec:	85 bb       	out	0x15, r24	; 21
  ee:	d7 cf       	rjmp	.-82     	; 0x9e <main+0x1c>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
