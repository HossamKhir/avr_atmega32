
timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000001b4  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000163  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000010d  00000000  00000000  0000036f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000163  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000048  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b2  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000006d  00000000  00000000  000007da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000847  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 67 00 	call	0xce	; 0xce <main>
  74:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_11>:
#define F_CPU 1000000UL



ISR(TIMER0_OVF_vect)  //TCNT0=255:256  there is overflow so INT Occur each 256 tick , INT Occur 
{ TCNT0=6 ; tmrr0++ ; 
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	86 e0       	ldi	r24, 0x06	; 6
  8c:	82 bf       	out	0x32, r24	; 50
  8e:	80 91 60 00 	lds	r24, 0x0060
  92:	90 91 61 00 	lds	r25, 0x0061
  96:	01 96       	adiw	r24, 0x01	; 1
	
	if(tmrr0==4) {tmrr0=0 ;
  98:	84 30       	cpi	r24, 0x04	; 4
  9a:	91 05       	cpc	r25, r1
  9c:	29 f0       	breq	.+10     	; 0xa8 <__vector_11+0x2c>
#define F_CPU 1000000UL



ISR(TIMER0_OVF_vect)  //TCNT0=255:256  there is overflow so INT Occur each 256 tick , INT Occur 
{ TCNT0=6 ; tmrr0++ ; 
  9e:	90 93 61 00 	sts	0x0061, r25
  a2:	80 93 60 00 	sts	0x0060, r24
  a6:	0c c0       	rjmp	.+24     	; 0xc0 <__vector_11+0x44>
	
	if(tmrr0==4) {tmrr0=0 ;
  a8:	10 92 61 00 	sts	0x0061, r1
  ac:	10 92 60 00 	sts	0x0060, r1
			         if(PORTC<9) { PORTC++ ;}
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	89 30       	cpi	r24, 0x09	; 9
  b4:	20 f4       	brcc	.+8      	; 0xbe <__vector_11+0x42>
  b6:	85 b3       	in	r24, 0x15	; 21
  b8:	8f 5f       	subi	r24, 0xFF	; 255
  ba:	85 bb       	out	0x15, r24	; 21
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <__vector_11+0x44>
			        	else { PORTC=0 ; }
  be:	15 ba       	out	0x15, r1	; 21
		        }
	
	
	//TCNT0 & OCR0 A match will set the Output Compare Flag (OCF0) at the next timer clock cycle.
}
  c0:	9f 91       	pop	r25
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <main>:

int main(void)
{ int i ;
	
	
	DDRC=0XFF ; PORTC=0X00 ;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	84 bb       	out	0x14, r24	; 20
  d2:	15 ba       	out	0x15, r1	; 21
	
	DDRA=0XFF;PORTA=0X00 ;
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	1b ba       	out	0x1b, r1	; 27
		
	SET_BIT(SREG, 7) ; // Enable GIE
  d8:	8f b7       	in	r24, 0x3f	; 63
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	8f bf       	out	0x3f, r24	; 63
	
	// Timer INT
	
	SET_BIT(TIMSK,0); //Enable Timer INT
  de:	89 b7       	in	r24, 0x39	; 57
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	89 bf       	out	0x39, r24	; 57

	CLEAR_BIT(TCCR0,3);CLEAR_BIT(TCCR0,6); // Timer normal Mode
  e4:	83 b7       	in	r24, 0x33	; 51
  e6:	87 7f       	andi	r24, 0xF7	; 247
  e8:	83 bf       	out	0x33, r24	; 51
  ea:	83 b7       	in	r24, 0x33	; 51
  ec:	8f 7b       	andi	r24, 0xBF	; 191
  ee:	83 bf       	out	0x33, r24	; 51

	CLEAR_BIT(TCCR0,4);CLEAR_BIT(TCCR0,5); //  Normal port operation, OC0 disconnected.
  f0:	83 b7       	in	r24, 0x33	; 51
  f2:	8f 7e       	andi	r24, 0xEF	; 239
  f4:	83 bf       	out	0x33, r24	; 51
  f6:	83 b7       	in	r24, 0x33	; 51
  f8:	8f 7d       	andi	r24, 0xDF	; 223
  fa:	83 bf       	out	0x33, r24	; 51

	SET_BIT(TCCR0,0);CLEAR_BIT(TCCR0,1);SET_BIT(TCCR0,2); // clk/1024 (prescaler)
  fc:	83 b7       	in	r24, 0x33	; 51
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	83 bf       	out	0x33, r24	; 51
 102:	83 b7       	in	r24, 0x33	; 51
 104:	8d 7f       	andi	r24, 0xFD	; 253
 106:	83 bf       	out	0x33, r24	; 51
 108:	83 b7       	in	r24, 0x33	; 51
 10a:	84 60       	ori	r24, 0x04	; 4
 10c:	83 bf       	out	0x33, r24	; 51
	
	TCNT0=6 ;
 10e:	86 e0       	ldi	r24, 0x06	; 6
 110:	82 bf       	out	0x32, r24	; 50

	
	while(1)
	{
	for(i=0;i<=9;i++) {	PORTA=i; _delay_ms(1000); }
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	4f e3       	ldi	r20, 0x3F	; 63
 11e:	5d e0       	ldi	r21, 0x0D	; 13
 120:	63 e0       	ldi	r22, 0x03	; 3
 122:	41 50       	subi	r20, 0x01	; 1
 124:	50 40       	sbci	r21, 0x00	; 0
 126:	60 40       	sbci	r22, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x54>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x5e>
 12c:	00 00       	nop
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	8a 30       	cpi	r24, 0x0A	; 10
 132:	91 05       	cpc	r25, r1
 134:	94 f3       	brlt	.-28     	; 0x11a <main+0x4c>
 136:	83 2f       	mov	r24, r19
 138:	92 2f       	mov	r25, r18
 13a:	ef cf       	rjmp	.-34     	; 0x11a <main+0x4c>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
