
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001b7  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000160  00000000  00000000  00000355  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000017e  00000000  00000000  000004b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000054  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001c4  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000024  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <uart_init>:
		
void uart_init(){
	//UART Initialization 3 steps 
	
	//1- set baud rate  
	UBRRL=51; UBRRH=0; // 9600 at 8MHZ 
  6c:	83 e3       	ldi	r24, 0x33	; 51
  6e:	89 b9       	out	0x09, r24	; 9
  70:	10 bc       	out	0x20, r1	; 32
	
	//2-  frame format and Synch or Asynch 

	 CLR_BIT(UCSRC,UMSEL) ;                                                     // Asynch mode
  72:	80 b5       	in	r24, 0x20	; 32
  74:	8f 7b       	andi	r24, 0xBF	; 191
  76:	80 bd       	out	0x20, r24	; 32
	 CLR_BIT(UCSRC,UPM0)  ;  CLR_BIT(UCSRC,UPM1) ;                             // Parity Mode Disabled
  78:	80 b5       	in	r24, 0x20	; 32
  7a:	8f 7e       	andi	r24, 0xEF	; 239
  7c:	80 bd       	out	0x20, r24	; 32
  7e:	80 b5       	in	r24, 0x20	; 32
  80:	8f 7d       	andi	r24, 0xDF	; 223
  82:	80 bd       	out	0x20, r24	; 32
	 CLR_BIT(UCSRC,USBS)  ;                                                   // one bit stop
  84:	80 b5       	in	r24, 0x20	; 32
  86:	87 7f       	andi	r24, 0xF7	; 247
  88:	80 bd       	out	0x20, r24	; 32
	 SET_BIT(UCSRC,UCSZ0) ;  SET_BIT(UCSRC,UCSZ1) ;  CLR_BIT(UCSRB,UCSZ2) ;  // DATA 8 bits
  8a:	80 b5       	in	r24, 0x20	; 32
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	80 bd       	out	0x20, r24	; 32
  90:	80 b5       	in	r24, 0x20	; 32
  92:	84 60       	ori	r24, 0x04	; 4
  94:	80 bd       	out	0x20, r24	; 32
  96:	52 98       	cbi	0x0a, 2	; 10
	
	//3- enable RX,TX
	   SET_BIT(UCSRB,RXEN)  ; // ENABLE RX
  98:	54 9a       	sbi	0x0a, 4	; 10
	   SET_BIT(UCSRB,TXEN) ; // ENABLE TX                                                                     
  9a:	53 9a       	sbi	0x0a, 3	; 10
  9c:	08 95       	ret

0000009e <uart_sendchar>:
}

void uart_sendchar(unsigned char data){

	while(GET_BIT(UCSRA,UDRE) == 0) ;  // 
  9e:	5d 9b       	sbis	0x0b, 5	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <uart_sendchar>
	 // if == 1   so   the transmit buffer (UDR) is ready to receive new data to send it 
	
	UDR=data;  
  a2:	8c b9       	out	0x0c, r24	; 12
  a4:	08 95       	ret

000000a6 <main>:
{
	
	// 7 segment
	char sev_seg[10]={0,1,2,3,4,5,6,7,8,9} ;
	int d=0 ;
	DDRB=0XFF ;   // O/P
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	87 bb       	out	0x17, r24	; 23
	PORTB=0X00 ; // OUT 00000000
  aa:	18 ba       	out	0x18, r1	; 24
	
	uart_init();
  ac:	0e 94 36 00 	call	0x6c	; 0x6c <uart_init>

	while(1)
	{  
		
		
	for(d=0;d<=9;d++){uart_sendchar(d) ; _delay_ms(500);
  b0:	c0 e0       	ldi	r28, 0x00	; 0
  b2:	d0 e0       	ldi	r29, 0x00	; 0
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	10 e0       	ldi	r17, 0x00	; 0
  b8:	8c 2f       	mov	r24, r28
  ba:	0e 94 4f 00 	call	0x9e	; 0x9e <uart_sendchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f e9       	ldi	r18, 0x9F	; 159
  c0:	86 e8       	ldi	r24, 0x86	; 134
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x1e>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x28>
  ce:	00 00       	nop
  d0:	21 96       	adiw	r28, 0x01	; 1
  d2:	ca 30       	cpi	r28, 0x0A	; 10
  d4:	d1 05       	cpc	r29, r1
  d6:	84 f3       	brlt	.-32     	; 0xb8 <main+0x12>
  d8:	c0 2f       	mov	r28, r16
  da:	d1 2f       	mov	r29, r17
  dc:	ed cf       	rjmp	.-38     	; 0xb8 <main+0x12>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
